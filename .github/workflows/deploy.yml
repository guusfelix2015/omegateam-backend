name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  NODE_VERSION: '20'
  APP_NAME: 'lineage-cp-backend'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DEPLOY_PATH: '/var/www/lineage-cp-backend'

jobs:
  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.image }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Output Image Info
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup SSH with Password
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Create Deployment Directory
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} "mkdir -p ${{ env.DEPLOY_PATH }}"

      - name: Upload Docker Compose File
        run: |
          if [ ! -f "docker-compose.production.yml" ]; then
            echo "Error: docker-compose.production.yml not found locally"
            ls -la
            exit 1
          fi

          echo "Uploading docker-compose.production.yml to server..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" scp docker-compose.production.yml ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }}:${{ env.DEPLOY_PATH }}/
          echo "File uploaded successfully"

      - name: Upload Nginx Configuration
        run: |
          echo "Creating nginx directories on server..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} "mkdir -p ${{ env.DEPLOY_PATH }}/nginx/conf.d ${{ env.DEPLOY_PATH }}/nginx/ssl"

          echo "Uploading nginx configuration files..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -r nginx/ ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }}:${{ env.DEPLOY_PATH }}/

          echo "Uploading SSL setup scripts..."
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} "mkdir -p ${{ env.DEPLOY_PATH }}/scripts"
          sshpass -p "${{ secrets.SSH_PASSWORD }}" scp scripts/setup-ssl.sh scripts/deploy-with-ssl.sh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }}:${{ env.DEPLOY_PATH }}/scripts/
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} "chmod +x ${{ env.DEPLOY_PATH }}/scripts/*.sh"

          echo "Nginx configuration uploaded successfully"

      - name: Deploy with Docker
        env:
          # Application Environment Variables from GitHub Secrets
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          CORS_ORIGIN: ${{ secrets.CORS_ORIGIN }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          # Optional Environment Variables
          LOG_LEVEL: ${{ secrets.LOG_LEVEL || 'info' }}
          RATE_LIMIT_MAX: ${{ secrets.RATE_LIMIT_MAX || '100' }}
          RATE_LIMIT_WINDOW: ${{ secrets.RATE_LIMIT_WINDOW || '60000' }}
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            set -e

            echo "Starting Docker deployment..."

            cd ${{ env.DEPLOY_PATH }}

            if [ ! -f "docker-compose.production.yml" ]; then
              echo "Error: docker-compose.production.yml not found in ${{ env.DEPLOY_PATH }}"
              echo "Current directory: $(pwd)"
              echo "Directory contents:"
              ls -la
              exit 1
            fi

            echo "Found docker-compose.production.yml"
            echo "Current working directory: $(pwd)"

            echo "Docker version: $(docker --version)"
            echo "Docker Compose version: $(docker compose version)"

            COMPOSE_FILE="docker-compose.production.yml"

            if command -v docker-compose >/dev/null 2>&1; then
              DOCKER_COMPOSE_CMD="docker-compose"
              echo "Using docker-compose standalone"
            elif docker compose version >/dev/null 2>&1; then
              DOCKER_COMPOSE_CMD="docker compose"
              echo "Using docker compose plugin"
            else
              echo "Error: Neither docker-compose nor docker compose found"
              exit 1
            fi

            echo "Testing Docker Compose configuration..."
            if $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" config >/dev/null 2>&1; then
              echo "Docker Compose configuration is valid"
            else
              echo "Docker Compose configuration test failed"
              echo "Error details:"
              $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" config 2>&1 || true
              exit 1
            fi

            # Set environment variables for Docker Compose
            export DEPLOY_IMAGE="${{ needs.build.outputs.image }}"
            export DATABASE_URL="${{ env.DATABASE_URL }}"
            export JWT_SECRET="${{ env.JWT_SECRET }}"
            export CORS_ORIGIN="${{ env.CORS_ORIGIN }}"
            export POSTGRES_DB="${{ env.POSTGRES_DB }}"
            export POSTGRES_USER="${{ env.POSTGRES_USER }}"
            export POSTGRES_PASSWORD="${{ env.POSTGRES_PASSWORD }}"
            export LOG_LEVEL="${{ env.LOG_LEVEL }}"
            export RATE_LIMIT_MAX="${{ env.RATE_LIMIT_MAX }}"
            export RATE_LIMIT_WINDOW="${{ env.RATE_LIMIT_WINDOW }}"

            echo "Pulling Docker image: $DEPLOY_IMAGE"
            docker pull "$DEPLOY_IMAGE"

            echo "Stopping existing containers..."
            $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" down || echo "No containers to stop"

            echo "Starting database..."
            $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" up -d postgres

            echo "Waiting for database to be ready..."
            sleep 15

            echo "Running database migrations..."
            NETWORK_NAME=$(docker network ls --filter name=lineage-network --format "{{.Name}}" | head -1)
            if [ -z "$NETWORK_NAME" ]; then
              echo "Error: Could not find lineage-network"
              docker network ls
              exit 1
            fi
            echo "Using network: $NETWORK_NAME"

            docker run --rm \
              --network "$NETWORK_NAME" \
              -e DATABASE_URL="$DATABASE_URL" \
              "$DEPLOY_IMAGE" \
              npx prisma migrate deploy

            echo "Running database seed..."
            docker run --rm \
              --network "$NETWORK_NAME" \
              -e DATABASE_URL="$DATABASE_URL" \
              "$DEPLOY_IMAGE" \
              node seed.js

            echo "Setting up SSL certificates..."
            if [ ! -f "nginx/ssl/fullchain.pem" ] || [ ! -f "nginx/ssl/privkey.pem" ]; then
              echo "Generating self-signed SSL certificate for testing..."
              bash scripts/setup-ssl.sh self-signed
            else
              echo "SSL certificates already exist"
            fi

            echo "Starting application..."
            $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" up -d backend

            echo "Starting nginx proxy..."
            $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" up -d nginx

            echo "Waiting for nginx to be ready..."
            sleep 10

            echo "Testing nginx configuration..."
            if docker exec lineage-nginx-prod nginx -t; then
              echo "✅ Nginx configuration is valid"
            else
              echo "❌ Nginx configuration has errors"
              docker logs lineage-nginx-prod --tail 20
              exit 1
            fi

            echo "Deployment completed successfully"
          EOF

      - name: Health Check
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            set -e

            echo "Performing health check..."

            sleep 10

            MAX_ATTEMPTS=20
            ATTEMPT=1

            while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
              echo "Health check attempt $ATTEMPT/$MAX_ATTEMPTS..."

              # Test HTTPS through nginx (this is what really matters)
              if curl -k -f -s https://localhost/health >/dev/null 2>&1; then
                echo "✅ HTTPS proxy is working!"
                curl -k -s https://localhost/health
                echo "✅ Backend is accessible through nginx proxy"
                break
              else
                # If HTTPS fails, let's check what's happening
                echo "HTTPS test failed, checking components..."

                # Check if nginx is responding at all
                if curl -f -s http://localhost/ >/dev/null 2>&1; then
                  echo "✅ Nginx is responding on HTTP"
                else
                  echo "❌ Nginx is not responding on HTTP"
                fi

                # Check backend container health
                BACKEND_HEALTH=$(docker inspect lineage-backend-prod --format='{{.State.Health.Status}}' 2>/dev/null || echo "unknown")
                echo "Backend health status: $BACKEND_HEALTH"

                if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
                  echo "❌ Health check failed after $MAX_ATTEMPTS attempts"
                  echo "Backend logs:"
                  docker logs lineage-backend-prod --tail 20
                  echo "Nginx logs:"
                  docker logs lineage-nginx-prod --tail 20
                  echo "Container status:"
                  docker ps
                  echo "Testing nginx config:"
                  docker exec lineage-nginx-prod nginx -t || echo "Nginx config test failed"
                  exit 1
                fi

                echo "Waiting 5 seconds before next attempt..."
                sleep 5
                ATTEMPT=$((ATTEMPT + 1))
              fi
            done

            echo "Deployment completed successfully!"
          EOF

      - name: Deployment Summary
        if: always()
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} << 'EOF' || true
            echo "Deployment Summary:"
            echo "=================="
            echo "Deployment Time: $(date)"
            echo "Server: ${{ secrets.SERVER_HOST }}"
            echo "Deployed Image: ${{ needs.build.outputs.image }}"
            echo ""
            echo "Container Status:"
            docker ps --filter "name=lineage" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          EOF

      - name: Cleanup Old Docker Images
        if: success()
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} << 'EOF' || true
            echo "Cleaning up old Docker images..."

            docker image prune -f

            docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} --format "{{.ID}} {{.CreatedAt}}" | \
              sort -k2 -r | tail -n +4 | awk '{print $1}' | xargs -r docker rmi || true

            echo "Docker cleanup completed"
          EOF

      - name: Notify Deployment Status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "Deployment completed successfully!"
            echo "Application should be available at your production URL"
            echo "Health Check: http://your-domain.com/health"
            echo "Deployed Image: ${{ needs.build.outputs.image }}"
          else
            echo "Deployment failed!"
            echo "Please check the logs above for error details"
          fi
