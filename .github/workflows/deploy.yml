name: üöÄ Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual trigger

env:
  NODE_VERSION: '20'
  APP_NAME: 'lineage-cp-backend'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DEPLOY_PATH: '/var/www/lineage-cp-backend'

jobs:
  test:
    name: üß™ Test & Quality Check
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: lineage_test_db
          POSTGRES_USER: lineage_test_user
          POSTGRES_PASSWORD: lineage_test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: üìÇ Checkout Repository
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install Dependencies
        run: npm ci

      - name: üîç Run Type Check
        run: npm run typecheck

      - name: üßπ Run Linting
        run: npm run lint

      - name: üé® Check Code Formatting
        run: npm run format:check

      - name: üèóÔ∏è Build Application
        run: npm run build

      - name: üîß Setup Test Environment
        run: |
          cp .env.example .env
          echo "DATABASE_URL=postgresql://lineage_test_user:lineage_test_password@localhost:5432/lineage_test_db" >> .env

      - name: üóÑÔ∏è Setup Test Database
        run: |
          npx prisma generate
          npx prisma migrate deploy

      - name: üß™ Run Tests
        run: npm test

  build:
    name: üê≥ Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image: ${{ steps.image.outputs.image }}

    steps:
      - name: üìÇ Checkout Repository
        uses: actions/checkout@v4

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üè∑Ô∏è Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: üèóÔ∏è Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: üìù Output Image Info
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT

  deploy:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: üìÇ Checkout Repository
        uses: actions/checkout@v4

      - name: üîê Setup SSH with Password
        run: |
          # Install sshpass for password authentication
          sudo apt-get update
          sudo apt-get install -y sshpass

          # Add server to known hosts
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: ÔøΩ Upload Docker Compose File
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" scp docker-compose.production.yml ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }}:${{ env.DEPLOY_PATH }}/

      - name: üê≥ Deploy with Docker
        env:
          # Application Environment Variables from GitHub Secrets
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          CORS_ORIGIN: ${{ secrets.CORS_ORIGIN }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          # Optional Environment Variables
          LOG_LEVEL: ${{ secrets.LOG_LEVEL || 'info' }}
          RATE_LIMIT_MAX: ${{ secrets.RATE_LIMIT_MAX || '100' }}
          RATE_LIMIT_WINDOW: ${{ secrets.RATE_LIMIT_WINDOW || '60000' }}
          SWAGGER_ENABLED: ${{ secrets.SWAGGER_ENABLED || 'false' }}
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            set -e

            echo "ÔøΩ Starting simplified Docker deployment..."

            # Create deployment directory if it doesn't exist
            mkdir -p ${{ env.DEPLOY_PATH }}
            cd ${{ env.DEPLOY_PATH }}

            # Set environment variables for Docker Compose
            export DEPLOY_IMAGE="${{ needs.build.outputs.image }}"
            export DATABASE_URL="${{ env.DATABASE_URL }}"
            export JWT_SECRET="${{ env.JWT_SECRET }}"
            export CORS_ORIGIN="${{ env.CORS_ORIGIN }}"
            export POSTGRES_DB="${{ env.POSTGRES_DB }}"
            export POSTGRES_USER="${{ env.POSTGRES_USER }}"
            export POSTGRES_PASSWORD="${{ env.POSTGRES_PASSWORD }}"
            export LOG_LEVEL="${{ env.LOG_LEVEL }}"
            export RATE_LIMIT_MAX="${{ env.RATE_LIMIT_MAX }}"
            export RATE_LIMIT_WINDOW="${{ env.RATE_LIMIT_WINDOW }}"
            export SWAGGER_ENABLED="${{ env.SWAGGER_ENABLED }}"

            echo "üê≥ Pulling Docker image: $DEPLOY_IMAGE"
            docker pull "$DEPLOY_IMAGE"

            echo "üõë Stopping existing containers..."
            docker compose -f docker-compose.production.yml down || echo "No containers to stop"

            echo "üóÑÔ∏è Starting database..."
            docker compose -f docker-compose.production.yml up -d postgres

            echo "‚è≥ Waiting for database to be ready..."
            sleep 15

            echo "üóÑÔ∏è Running database migrations..."
            docker run --rm \
              --network "$(basename $(pwd))_lineage-network" \
              -e DATABASE_URL="$DATABASE_URL" \
              "$DEPLOY_IMAGE" \
              npx prisma migrate deploy

            echo "üöÄ Starting application..."
            docker compose -f docker-compose.production.yml up -d backend

            echo "‚úÖ Deployment completed successfully"
          EOF

      - name: üè• Health Check
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            set -e

            echo "üè• Performing health check..."

            # Wait for application to start
            sleep 10

            # Check if application is responding
            MAX_ATTEMPTS=20
            ATTEMPT=1

            while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
              echo "üîç Health check attempt $ATTEMPT/$MAX_ATTEMPTS..."

              if curl -f -s http://localhost:3000/health >/dev/null 2>&1; then
                echo "‚úÖ Application is healthy and responding"
                curl -s http://localhost:3000/health
                break
              else
                if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
                  echo "‚ùå Health check failed after $MAX_ATTEMPTS attempts"
                  echo "üìã Container logs:"
                  docker logs lineage-backend-prod --tail 20
                  exit 1
                fi

                echo "‚è≥ Waiting 5 seconds before next attempt..."
                sleep 5
                ATTEMPT=$((ATTEMPT + 1))
              fi
            done

            echo "üéâ Deployment completed successfully!"
          EOF

      - name: üìä Deployment Summary
        if: always()
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} << 'EOF' || true
            echo "üìä Deployment Summary:"
            echo "======================"
            echo "üïê Deployment Time: $(date)"
            echo "üìç Server: ${{ secrets.SERVER_HOST }}"
            echo "ÔøΩ Deployed Image: ${{ needs.build.outputs.image }}"
            echo ""
            echo "üìã Container Status:"
            docker ps --filter "name=lineage" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          EOF

      - name: üßπ Cleanup Old Docker Images
        if: success()
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} << 'EOF' || true
            echo "üßπ Cleaning up old Docker images..."

            # Remove dangling images
            docker image prune -f

            # Keep only the 3 most recent images of our app
            docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} --format "{{.ID}} {{.CreatedAt}}" | \
              sort -k2 -r | tail -n +4 | awk '{print $1}' | xargs -r docker rmi || true

            echo "‚úÖ Docker cleanup completed"
          EOF

      - name: üì¢ Notify Deployment Status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Deployment completed successfully!"
            echo "üåê Application should be available at your production URL"
            echo "üè• Health Check: http://your-domain.com/health"
            echo "üê≥ Deployed Image: ${{ needs.build.outputs.image }}"
          else
            echo "‚ùå Deployment failed!"
            echo "Please check the logs above for error details"
          fi
