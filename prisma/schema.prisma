// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  PLAYER
  CP_LEADER
}

enum ItemCategory {
  HELMET
  ARMOR
  PANTS
  BOOTS
  GLOVES
  NECKLACE
  EARRING
  RING
  SHIELD
  WEAPON
  COMUM
}

enum ItemGrade {
  D
  C
  B
  A
  S
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String
  nickname     String   @unique
  password     String?  // Optional for demo purposes
  avatar       String?
  isActive     Boolean  @default(true)
  lvl          Int      @default(1)
  role         UserRole
  classeId     String?  // Optional - user can set later
  ownedItemIds String[] @default([]) @map("owned_item_ids") // Array of item IDs that user owns
  gearScore    Int      @default(0) @map("gear_score") // Total gear score from owned items
  dkpPoints    Int      @default(0) @map("dkp_points") // DKP points balance
  bagUrl       String?  @map("bag_url") // Optional URL for inventory image
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  classe              Classe?            @relation(fields: [classeId], references: [id])
  companyParties      UserCompanyParty[]
  dkpTransactions     DkpTransaction[]
  raidParticipations  RaidParticipant[]

  @@map("users")
}

model Classe {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())

  // Relations
  users User[]

  @@map("classes")
}

model CompanyParty {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?  // Optional description
  maxMembers  Int?     // Optional maximum number of members
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Many-to-many relationship with User
  users UserCompanyParty[]

  @@map("company_parties")
}

model UserCompanyParty {
  id             String       @id @default(cuid())
  userId         String
  companyPartyId String
  joinedAt       DateTime     @default(now())

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyParty CompanyParty @relation(fields: [companyPartyId], references: [id], onDelete: Cascade)

  @@unique([userId, companyPartyId])
  @@map("user_company_parties")
}

model Item {
  id          String       @id @default(cuid())
  name        String       @unique
  category    ItemCategory
  grade       ItemGrade
  valorGsInt  Int          @map("valor_gs_int")
  valorDkp    Int          @map("valor_dkp")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  @@map("items")
}

enum DkpTransactionType {
  RAID_REWARD
  MANUAL_ADJUSTMENT
  ITEM_PURCHASE
}

model Raid {
  id          String   @id @default(cuid())
  name        String   @unique
  bossLevel   Int      @map("boss_level")
  baseScore   Int      @map("base_score") // Used in DKP calculation formula
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  instances   RaidInstance[]

  @@map("raids")
}

model RaidInstance {
  id            String   @id @default(cuid())
  raidId        String   @map("raid_id")
  completedAt   DateTime @default(now()) @map("completed_at")
  createdBy     String   @map("created_by") // Admin who registered the raid
  notes         String?  // Optional notes about the raid
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  raid            Raid @relation(fields: [raidId], references: [id], onDelete: Cascade)
  participants    RaidParticipant[]
  dkpTransactions DkpTransaction[]
  droppedItems    RaidDroppedItem[]

  @@map("raid_instances")
}

model RaidDroppedItem {
  id              String       @id @default(cuid())
  name            String
  category        ItemCategory
  grade           ItemGrade
  minDkpBid       Int          @map("min_dkp_bid") // Minimum DKP bid amount
  raidInstanceId  String       @map("raid_instance_id")
  droppedAt       DateTime     @default(now()) @map("dropped_at")
  createdBy       String       @map("created_by") // Admin who added the item
  notes           String?      // Optional notes about the drop
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")

  // Relations
  raidInstance    RaidInstance @relation(fields: [raidInstanceId], references: [id], onDelete: Cascade)

  @@map("raid_dropped_items")
}

model RaidParticipant {
  id              String   @id @default(cuid())
  raidInstanceId  String   @map("raid_instance_id")
  userId          String   @map("user_id")
  gearScoreAtTime Int      @map("gear_score_at_time") // GS when raid was completed
  dkpAwarded      Int      @map("dkp_awarded") // Calculated DKP for this participant
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  raidInstance    RaidInstance @relation(fields: [raidInstanceId], references: [id], onDelete: Cascade)
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([raidInstanceId, userId]) // Prevent duplicate participation
  @@map("raid_participants")
}

model DkpTransaction {
  id              String             @id @default(cuid())
  userId          String             @map("user_id")
  type            DkpTransactionType
  amount          Int                // Positive for credits, negative for debits
  reason          String             // Required description
  createdBy       String             @map("created_by") // Admin who created the transaction
  raidInstanceId  String?            @map("raid_instance_id") // For raid rewards
  createdAt       DateTime           @default(now()) @map("created_at")

  // Relations
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  raidInstance    RaidInstance? @relation(fields: [raidInstanceId], references: [id], onDelete: SetNull)

  @@map("dkp_transactions")
}
