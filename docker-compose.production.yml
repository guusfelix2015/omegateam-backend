version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: lineage-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - lineage-network
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # Backend Production
  backend:
    image: ${DEPLOY_IMAGE}
    container_name: lineage-backend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL}
      PORT: 3000
      HOST: 0.0.0.0
      JWT_SECRET: ${JWT_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN}
      LOG_LEVEL: ${LOG_LEVEL}
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW}
      # Contabo Object Storage (Optional)
      CONTABO_ACCESS_KEY_ID: ${CONTABO_ACCESS_KEY_ID}
      CONTABO_SECRET_ACCESS_KEY: ${CONTABO_SECRET_ACCESS_KEY}
      CONTABO_BUCKET_NAME: ${CONTABO_BUCKET_NAME:-lineage-cp-omega}
      CONTABO_REGION: ${CONTABO_REGION:-us-central-1}
      CONTABO_ENDPOINT: ${CONTABO_ENDPOINT:-https://usc1.contabostorage.com}
      CONTABO_PUBLIC_URL: ${CONTABO_PUBLIC_URL}
    expose:
      - '3000'
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - lineage-network
    healthcheck:
      test:
        [
          'CMD',
          'node',
          '-e',
          "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '5'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: lineage-nginx-prod
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
    networks:
      - lineage-network
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

volumes:
  postgres_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  lineage-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
